--
-- Insert values into articles
--
--DROP TABLE IF EXISTS article;
--CREATE TABLE article (id INT AUTO_INCREMENT NOT NULL, title VARCHAR(255) NOT NULL, content LONGTEXT NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB;

INSERT INTO article (title, content)
VALUES ("Om bra och snygg kod",'Smaken är ju som bekant som baken delad, gäller det då också kod? När man talar om stil har jag själv svårt för varningar om långa rader som uppmanar mig att bryta upp en för mig logisk sträng av uttryck i en osalig indenterad röra. Men om vi avlägsnar oss från sådana petitesser kan det tyckas lätt att kunna skönja hemsk kod, spagettikod från tiden då man använde GOTO-uttryck, eller kanske mer relevant för dagens objektorienterade verklighet: raviolikod", en bunt med osammanhängande objekt som flyter runt i en såsig kodbas. Jag tror absolut det finns något sådant som bra kod, mer så än snygg kod. Bra kod är sådan som är lättöverskådlig och lättläst, välorganiserad och logiskt uppdelad, inte överkomplicerad, gör vad den ämnar att göra och för alla enhetstestsnördar där ute, är lätt- och vältestad.

Så långt så bra. Men hur identifierar vi bra, och kanske till och med snygg kod? Vissa aspekter som lättöverskådlighet och lättlästhet kan vi kanske förnimma oss genom att läsa igenom koden, i synnerhet för mindre kodbaser. Därtill kan man skönja goda kodvanor, såsom riklig och relevant kommentering, bra och logisk uppdelning av kodblock, genomgående stilvanor, t.ex. vad gäller indentering m.m. Men när det kommer till att analysera hela kodbaser, kanske av större omfattning, kan denna form av analys vara bristfällig. 

Som tur är så har vi mätvärden som kan hjälpa oss med detta. När det kommer till programmering, i synnerhet objektorienterad programmering, talas det om de fyra c:na: coverage, complexity, cohesion och coupling. Var och ett av dessa mätvärden kan peka på potentiella problem, eller möjligtvis kvalitetskod om värdena är goda. Bra coverage, eller kodtäckning kan peka på en kodbas som är vältestad, förhoppningsvis felfri, som vidare eventuellt kan peka på välstrukturerad, okomplicerad och fokuserad kod. Komplexitet pekar ett finger på för många beslutspunkter, som kan försvåra testning och underhåll, är mindre överskådlig och potentiellt, pga av för många möjliga vägar, också felbenägen. Cohesion, som ofta mäts genom att titta på delade resurser mellan metoder, kan peka på kod som är väl sammanhållen, fokuserad och väl avgränsad, vilket återigen underlättar underhåll, översikt och testning, medan dålig sammanhållning kan peka på det motsatta, en klass som gör för mycket och inte har fokus, vilket leder till motsatt resultat. Sist men inte minst kan för många couplings, eller kopplingar innebära huvudvärk och underhållsproblem vid ändringar i beroenden; vid utgående kopplingar måste vi potentiellt ändra i alla utgående beroenden vid änringar, medan inkommande kopplingar innebär att man potentiellt måste ändra kod varje gång ett beroende ändras. Är man inte försiktig kan man ända upp med ett s.k. "god-object", en klass som gör allt, har kopplingar över hela planen och antaglien är hiskeligt komplicerad.

Dessa mätvärden, genom analysverktyg som phpmetrics och phpunit är viktiga verktyg när för programmerare, de hjälper oss att skapa kod som är huvudvärksfri, förhoppningsvis felfri och lätt att underhålla. Trots allt så finns det väl ingen som vill börja rota runt en gudaklass, gå igenom flera hundra rader av villkorssatser eller försöka lösa knytarna i ett nät av kopplingar. Genom välgenomtänkt användning av dessa verktyg så kan vi identifiera problematiska strukturer i vår kodbas, och de hjäper oss också, tror jag, att bli mer konsekventa i vårt kodande.

Det sagt om god kodstruktur så får vi inte förglömma de verktyg vi antagligen använder oftast, linters, som kan identifiera syntaxfel, potentiella buggar och stilfel. Medan analysverktyg som tittar på olika mättal kan identifiera makroproblem, strukturella problem, hjälper dessa verktyg oss på mikroplanet, de hjälper oss genom att peka ut kodrader, felaktigt använda variabler m.m. Dessa verktyg kan hjälpa oss att hitta fel och att skriva konsekvent, och därmed också mer lättöverskådlig kod. Vad gäller stil så får jag trots min utläggning ovan, en åsikt jag håller fast vid, erkänna behovet och nyttan av konsekvent stil, även om det är någon annan som bestämt den åt mig. Programmera arbetar trots allt ofta inte i ett vakum. Även om du själv lätt kan gå igenom din egen kod, är det möjligt att nästa stackars programmerare inte har det lika lätt.')
;